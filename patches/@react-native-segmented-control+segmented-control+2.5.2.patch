diff --git a/node_modules/@react-native-segmented-control/segmented-control/js/SegmentedControl.js b/node_modules/@react-native-segmented-control/segmented-control/js/SegmentedControl.js
index 99bdc2e..a14854a 100644
--- a/node_modules/@react-native-segmented-control/segmented-control/js/SegmentedControl.js
+++ b/node_modules/@react-native-segmented-control/segmented-control/js/SegmentedControl.js
@@ -43,6 +43,8 @@ const SegmentedControl = ({
   const [segmentWidth, setSegmentWidth] = React.useState(0);
   const animation = React.useRef(new Animated.Value(0)).current;
 
+  const [overallWidth, setOverallWidth] = React.useState(0);
+
   const handleChange = (index: number) => {
     // mocks iOS's nativeEvent
     const event: any = {
@@ -67,6 +69,14 @@ const SegmentedControl = ({
     }
   }, [animation, segmentWidth, selectedIndex]);
 
+  React.useEffect(() => {
+    const newSegmentWidth = values.length ? overallWidth / values.length : 0;
+    if (newSegmentWidth !== segmentWidth) {
+      animation.setValue(newSegmentWidth * (selectedIndex || 0));
+      setSegmentWidth(newSegmentWidth);
+    }
+  }, [values, overallWidth])
+
   return (
     <View
       style={[
@@ -81,11 +91,7 @@ const SegmentedControl = ({
           layout: {width},
         },
       }) => {
-        const newSegmentWidth = values.length ? width / values.length : 0;
-        if (newSegmentWidth !== segmentWidth) {
-          animation.setValue(newSegmentWidth * (selectedIndex || 0));
-          setSegmentWidth(newSegmentWidth);
-        }
+        setOverallWidth(width)
       }}>
       {!backgroundColor && !tintColor && (
         <SegmentsSeparators
